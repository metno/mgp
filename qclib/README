*** QC library (Qt Chat library) ***

OVERVIEW

The QC library is a simple chat system based on QLocalSocket and
QTcpSocket. Conversations are kept in a central SQLite database in
order for clients not to lose anything if they go offline for a
period.


DIRECTORY CONTENTS

docs/
  Documentation about the architecture etc.

qclib/

  The core library.

qcapp_example/

  An example local client app controlling the local chat window and
  receiving notifications. This shows how e.g. Diana would use the
  API. The qcapp communicates with the local chat server for this user
  (qclserver).

  A local chat server for this user will be started automatically if
  one is not running already.

qcopenchatwin/

  A local client app that first requests the local chat server for
  this user (qclserver) to open the chat window, and then
  terminates. This would typically be invoked from a system menu
  and/or a global keyboard shortcut.

  A local chat server for this user will be started automatically if
  one is not running already.

qclserver/

   The local chat server for a particular user (extracted from the
   USER environment variable). This shows a chat window and
   communicates with a central chat server (qccserver, using
   QTcpSocket) as well as with one or more local client apps (using
   QLocalSocket).

   NOTE: On a given client host, at most one qclserver will be
   running per user. It is not possible to start a second qclserver
   for the same user.

   NOTE: The local chat server terminates once the central chat server
   disconnects or if the initial connection attempt fails. In that
   case it is typically restarted automatically from a local client
   app (like the ones above) once the central server has been
   (re)started manually.

qccserver/

  The central chat server. This communicates with one or more
  qclservers (using QTcpSocket) and stores conversations in a local
  SQLite database file.


INSTALLATION

See INSTALL for how to compile the library and the apps.


USE CASES

(Note: In the following we assume that the library is compiled and that
PATH and LD_LIBRARY_PATH are set as appropriate.)

USE CASE 1: Create an empty database file.

  To create an empty database file called /disk1/test.db, first log on
  to the central host and issue the following command:

      qccserver --dbfile /disk1/test.db --initdb

  The command fails if the file already exists.
  REMEDY: (Re)move the file and try again.


USE CASE 2: Start the central chat server.

  To start a central chat server using database file /disk1/test.db
  and accepting local server connections on port 1105, log on to the
  central host and issue the following command:

      qccserver --dbfile /disk1/test.db --cport 1105

  The command fails if another process is already accepting
  connections on port 1105.
  REMEDY: Use a different port number or stop the existing
  process. (NOTE: The latter action may be the only alternative if the
  port number is hard-coded in clients!)


USE CASE 3: Start a qcapp_example (or other client apps, like qcopenchatwin).

  To start a qcapp_example associated with a central chat server that
  runs on dev-vm075 and accepts connections on port 1105, log on to
  the local host and issue the following command:

      qcapp_example --chost dev-vm075 --cport 1105

  The command fails if:

  - A local chat server for this user is currently running, but not
    connected to a central chat server on the given host/port.
    REMEDY: Try again after either 1) stopping the local chat server
    for this user, or 2) passing the appropriate host/port
    combination on the command line.

  - No central chat server is currently running on the given
    host/port. (Starting a local chat server won't be possible in this
    case.)
    REMEDY: Start the central chat server and try again.
